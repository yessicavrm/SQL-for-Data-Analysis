SELECT channel,
      AVG(event_count) AS avg_event_count
FROM
(SELECT DATE_TRUNC('day', occurred_at) AS day,
channel,
COUNT(*) as event_count
FROM demo.web_events_full
GROUP BY 1,2
ORDER BY 1
) sub
GROUP BY 1
ORDER BY 2 DESC

              /* Query against the result of the subquery
              Subqueries are required to have aliases */
              
___________________________________________________________________________
/* Use the test environment below to find the number of events that
occur for each day for each channel. */

SELECT DATE_TRUNC('day', occurred_at) AS day, channel, COUNT(*) as event_count
FROM web_events
GROUP BY 1,2
ORDER BY event_count DESC
___________________________________________________________________________

/* Important to create readable subqueries, this can be done through
   indentation */
   
___________________________________________________________________________
SELECT  *
FROM demo.orders
WHERE DATE_TRUNC('month', occurred_at)
        (SELECT DATE_TRUNC('month', MIN(occurred_at)) AS min_month
        FROM demo.orders)
 ORDER BY occurred_at
 
 /* In the first subquery you wrote, you created a table that you could 
 then query again in the FROM statement. However, if you are only 
 returning a single value, you might use that value in a logical statement 
 like WHERE, HAVING, or even SELECT - the value could be nested within 
 a CASE statement. */
 
 
 ___________________________________________________________________________
/* Next you will pull the average for each product on the first day */

SELECT AVG(standard_qty) standard,
	AVG(gloss_qty) gloss,
    AVG(poster_qty) poster,
    SUM(total_amt_usd)
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = 
	(SELECT MIN(DATE_TRUNC('month', occurred_at))
	FROM orders)     
 
 
  ___________________________________________________________________________
  
 --Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.
 
 
 SELECT s.name as rep_name, r.region as region_name , SUM(o.total_amt_usd) as total_amt
 FROM sales_rep s
 JOIN accounts a
 ON a.sales_rep = s.id
 JOIN orders o
 ON oaccount_id = a.id
 JOIN region r
 ON r.id = s.region_id
 GROUP BY 1,2
 ORDER BY 3 DESC
 
  ___________________________________________________________________________
  
  -- 9. Quiz: Subquery Mania
 SELECT sr.name rep_name, r.name region_name
 -- Mistake I made was not including the names for the columns which meant
 -- they didn't show up on the table
  ___________________________________________________________________________
  
SELECT T3.rep_name, T2.region_name, t2.max_sales --We're selecting the regions with the highest total sales
FROM
(SELECT region_name, MAX(total_sales) max_sales
	FROM(
	SELECT sr.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_sales
	FROM sales_reps sr
	JOIN region r
	ON sr.region_id=r.id
	JOIN accounts a
	ON a.sales_rep_id=sr.id
	JOIN orders o
	ON o.account_id=a.id
	GROUP BY 1, 2
	ORDER BY 3 Desc) T1
	GROUP BY 1) T2
JOIN (
  SELECT sr.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_sales
FROM sales_reps sr
JOIN region r
ON sr.region_id=r.id
JOIN accounts a
ON a.sales_rep_id=sr.id
JOIN orders o
ON o.account_id=a.id
GROUP BY 1, 2
ORDER BY 3 Desc) T3
ON T2.region_name = T3.region_name AND T2.max_sales = T3.total_sales; 
-- In the 3d table we match the highest total sales region with its sales rep.
 _________________________________________________________________________________
 --2. For the region with the largest sales total_amt_usd, how many total orders were placed?
 
 SELECT r.name, COUNT(o.total) total_orders
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name
HAVING SUM(o.total_amt_usd) = (
      SELECT MAX(total_amt)
      FROM (SELECT r.name region_name, SUM(o.total_amt_usd) total_amt
              FROM sales_reps s
              JOIN accounts a
              ON a.sales_rep_id = s.id
              JOIN orders o
              ON o.account_id = a.id
              JOIN region r
              ON r.id = s.region_id
              GROUP BY r.name) sub);
  _________________________________________________________________________________
 -- 3.How many accounts had more total purchases than the account name which has bought 
 -- the most standard_qty paper throughout their lifetime as a customer?
 SELECT COUNT(*)
FROM (SELECT a.name
       FROM orders o
       JOIN accounts a
       ON a.id = o.account_id
       GROUP BY 1
       HAVING SUM(o.total) > (SELECT total 
                   FROM (SELECT a.name act_name, SUM(o.standard_qty) tot_std, SUM(o.total) total
		   --Get the sum of standard quantity orders and sum of total orders
                         FROM accounts a
                         JOIN orders o
                         ON o.account_id = a.id
                         GROUP BY 1
                         ORDER BY 2 DESC
                         LIMIT 1) inner_tab)
             ) counter_tab;
 
 _________________________________________________________________________________
-- 4.For the customer that spent the most (in total over their lifetime as a customer) 
-- total_amt_usd, how many web_events did they have for each channel?
SELECT a.name, w.channel, COUNT(*)
FROM accounts a
JOIN web_events w
ON a.id = w.account_id AND a.id =  (SELECT id
                     FROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
                           FROM orders o
                           JOIN accounts a
                           ON a.id = o.account_id
                           GROUP BY a.id, a.name
                           ORDER BY 3 DESC
                           LIMIT 1) inner_table)
GROUP BY 1, 2
ORDER BY 3 DESC;
 _________________________________________________________________________________
 
 /* 
 Subqueries can make your query lenghty and difficult to read
 The WITH statement is often called a Common Table Expression or CTE. Though these 
 expressions serve the exact same purpose as subqueries, they are more common in practice, 
 as they tend to be cleaner for a future reader to follow the logic.
 */
  _________________________________________________________________________________

 --Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.
WITH t1 AS (
  SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt
   FROM sales_reps s
   JOIN accounts a
   ON a.sales_rep_id = s.id
   JOIN orders o
   ON o.account_id = a.id
   JOIN region r
   ON r.id = s.region_id
   GROUP BY 1,2
   ORDER BY 3 DESC), 
t2 AS (
   SELECT region_name, MAX(total_amt) total_amt
   FROM t1
   GROUP BY 1)
SELECT t1.rep_name, t1.region_name, t1.total_amt
FROM t1
JOIN t2
ON t1.region_name = t2.region_name AND t1.total_amt = t2.total_amt;
 
